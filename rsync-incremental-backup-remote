#!/bin/bash

# Configuration variables (change as you wish)
src="/path/to/source"
dst="/path/to/target"
remote="ssh_remote"
backupDepth=7
timeout=1800
pathBak0="data"
partialFolderName=".rsync-partial"
rotationLockFileName=".rsync-rotation-lock"
pathBakN="backup"
nameBakN="backup"
logName="rsync-incremental-backup_$(date -Id)_$(date +%H-%M-%S).log"
tempLogPath="/tmp"
logFolderName="log"

# Combinate previously defined variables for use (don't touch this)
remoteDst="${remote}:${dst}"
bak0="${dst}/${pathBak0}"
remoteBak0="${remoteDst}/${pathBak0}"
partialFolderPath="${dst}/${partialFolderName}"
rotationLockFilePath="${dst}/${rotationLockFileName}"
logPath="${dst}/${pathBakN}/${logFolderName}"
remoteLogPath="${remote}:${logPath}"
logFile="${tempLogPath}/${logName}"

# Prepare log file
touch ${logFile}

echo -e "********************************" | tee -a ${logFile}
echo -e "*                              *" | tee -a ${logFile}
echo -e "*   rsync-incremental-backup   *" | tee -a ${logFile}
echo -e "*                              *" | tee -a ${logFile}
echo -e "********************************" | tee -a ${logFile}

# Prepare backup paths
i=1
while [ $i -le $backupDepth ]
do
	export bak$i="${dst}/${pathBakN}/${nameBakN}.$i"
	true $((i = i + 1))
done

# Prepare rsync configuration
rsyncFlags="-achvz --info=progress2 --timeout=${timeout} --delete --no-W --partial-dir=${partialFolderName} \
--link-dest=${bak1}/ --log-file=${logFile}"

echo -e "\n[$(date -Is)] You are going to backup" | tee -a ${logFile}
echo -e "\tfrom:  ${src}" | tee -a ${logFile}
echo -e "\tto:    ${remoteBak0}" | tee -a ${logFile}
echo -e "\tflags: ${rsyncFlags}" | tee -a ${logFile}

# Rotate backups if last rsync succeeded ..
if (ssh ${remote} "[ ! -d ${partialFolderPath} ] && [ ! -e ${rotationLockFilePath} ]")
then
	# .. and there is previous data
	if (ssh ${remote} "[ -d ${bak0} ]")
	then
		echo -e "\n[$(date -Is)] Backups rotation begins" | tee -a ${logFile}

		true $((i = i - 1))

		# Remove the oldest backup if exists
		bak="bak$i"
		ssh ${remote} "rm -rf ${!bak}"

		# Rotate the previous backups
		while [ $i -gt 0 ]
		do
			bakNewPath="bak$i"
			true $((i = i - 1))
			bakOldPath="bak$i"
			if (ssh ${remote} "[ -d ${!bakOldPath} ]")
			then
				ssh ${remote} "mv ${!bakOldPath} ${!bakNewPath}"
			fi
		done

		echo -e "[$(date -Is)] Backups rotation finished\n" | tee -a ${logFile}
	else
		echo -e "\n[$(date -Is)] No previous data found, there is no backups to be rotated\n" | tee -a ${logFile}
	fi
else
	echo -e "\n[$(date -Is)] Last backup failed, backups will not be rotated\n" | tee -a ${logFile}
fi

# Prepare paths at destination
ssh ${remote} "mkdir -p ${dst} ${logPath}"

# Set rotation lock file to detect in next run when backup fails
ssh ${remote} "touch ${rotationLockFilePath}"

echo -e "[$(date -Is)] Backup begins\n" | tee -a ${logFile}

# Do the backup
rsync ${rsyncFlags} ${src}/ ${remoteBak0}/

# Clear unneeded partials if rsync succeeded
if [ "$?" -eq "0" ]
then
	echo -e "\n[$(date -Is)] Backup completed successfully\n" | tee -a ${logFile}

	ssh ${remote} "rm -rf ${partialFolderPath} ${rotationLockFilePath}"
else
	echo -e "\n[$(date -Is)] Backup failed, try again later\n" | tee -a ${logFile}
fi

# Send the complete log file to destination
scp ${logFile} ${remoteLogPath}
rm ${logFile}
